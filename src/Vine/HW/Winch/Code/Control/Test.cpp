#include <stdio.h>
#include "Common.h"
#include "JacobianControl.h"
#include <stddef.h>
#ifdef _WIN32
#include <Windows.h>
#endif
#ifdef __AVR_ATmega2560__
#include "Arduino.h"
#endif

#define RUN_JACOBIAN_TEST
//#define RUN_CVX_TEST

struct DeltaTestData
{
  //Vec2f64 delta_x_desired;
  f64 q_res[6];
};

Matrixf64 <2, N_TURN_ACT> J;

#ifdef RUN_JACOBIAN_TEST
void runTest()
{
  DeltaTestData testData[] = { 
    { 64.441895, 151.287053, 0.379469, 0.436728, 0.000000, 0.00000000 },
    { 202.793802, 184.238494, 1.000000, 0.892389, 0.000000, 52.78551522 },
    { -205.614920, 85.000440, 0.539768, 1.000000, 0.000000, 47.72306829 },
    { -108.004591, 119.326096, 0.269756, 1.000000, 0.000000, 119.32609551 },
    { 135.574656, 116.590587, 0.608693, 1.000000, 0.000000, 116.59058706 },
    { -55.678492, -33.138699, 0.421665, 0.904337, 0.000000, 0.00000000 },
    { -129.316904, -16.930219, 0.073936, 0.855463, 0.000000, 0.00000000 },
    { -46.000939, -139.151386, 0.000000, 0.695682, 0.241914, 0.00000000 },
    { 99.436972, -164.872233, 0.000000, 0.209117, 0.231294, 0.00000000 },
    { -152.396359, -15.858393, 0.000000, 0.567218, 0.635174, 0.00000000 },
    { 205.673242, -3.178112, 0.000000, 0.048448, 0.125578, 0.00000000 },
    { -12.842182, -4.996420, 0.000000, 0.073341, 0.164896, 0.00000000 },
    { -31.628004, -165.404677, 0.086330, 0.000000, 0.569036, 0.00000000 },
    { -103.949324, 43.490096, 0.000000, 0.236316, 0.679807, 0.00000000 },
    { 216.962137, -157.061541, 0.532788, 0.000000, 0.896889, 0.00000000 },
    { -111.533577, 31.592886, 0.208354, 0.000000, 0.805688, 0.00000000 },
    { -220.759753, -36.130330, 0.000000, 0.190704, 1.000000, 69.76129549 },
    { -9.816971, -331.193040, 0.000000, 0.000000, 1.000000, 269.43357841 },
    { 13.782395, -27.606996, 0.034456, 0.000000, 1.000000, 27.60699586 },
    { -75.903143, -97.678829, 0.000000, 0.000000, 1.000000, 115.75897764 },
    { -378.795605, -58.175923, 0.000000, 0.347540, 1.000000, 357.13457813 },
    { 87.753673, -79.146025, 0.000000, 0.013918, 0.894853, 0.00000000 },
    { -35.373749, -2.756243, 0.000000, 0.098374, 0.987266, 0.00000000 },
    { -33.321031, -41.174523, 0.000000, 0.057247, 1.000000, 45.03291074 },
    { 3.174007, -30.532362, 0.000000, 0.000000, 1.000000, 13.52780297 },
    { -132.568491, 237.439053, 0.000000, 0.674135, 0.988707, 0.00000000 },
    { -261.619505, -15.161434, 0.000000, 0.973980, 1.000000, 230.23800923 },
    { -230.418042, -172.144820, 0.000000, 0.889298, 1.000000, 285.62028782 },
    { -136.639111, 80.554301, 0.000000, 1.000000, 1.000000, 122.02999563 },
    { 129.618379, -253.842227, 0.000000, 0.288392, 1.000000, 14.66830462 },
    { 275.070239, 194.453519, 0.118614, 0.000000, 0.150269, 0.00000000 },
    { -139.372818, 54.351545, 0.000000, 0.308268, 0.301637, 0.00000000 },
    { 187.663714, -113.101951, 0.324140, 0.000000, 0.319866, 0.00000000 },
    { -0.133764, 10.988762, 0.307944, 0.000000, 0.288145, 0.00000000 },
    { 64.145642, 227.483226, 0.508508, 0.368543, 0.000000, 0.00000000 },
    { 172.847716, 286.697519, 1.000000, 1.000000, 0.000000, 123.01507159 },
    { 10.662809, -66.770553, 0.930282, 0.807250, 0.000000, 0.00000000 },
    { 14.296744, -133.382321, 0.773503, 0.422208, 0.000000, 0.00000000 },
    { -84.735267, 14.844662, 0.583091, 0.465061, 0.000000, 0.00000000 },
    { 258.526759, -159.333977, 0.999429, 0.005104, 0.000000, 0.00000000 },
    { -3.806925, -7.656277, 0.995859, 0.000000, 0.016998, 0.00000000 },
    { -20.065783, -32.005908, 0.991891, 0.000000, 0.109391, 0.00000000 },
    { 22.015011, -39.361335, 1.000000, 0.000000, 0.171146, 35.93733516 },
    { -63.782427, -28.476047, 0.881646, 0.000000, 0.253350, 0.00000000 },
    { 3.400344, -13.036971, 0.908964, 0.000000, 0.290984, 0.00000000 },
    { 78.553297, -264.350487, 1.000000, 0.000000, 0.810646, 168.66848587 },
    { -35.375026, 1.814034, 0.908944, 0.000000, 0.805410, 0.00000000 },
    { 31.180290, -12.903764, 1.000000, 0.000000, 0.839900, 1.91211683 },
    { -316.304878, 61.588168, 0.120343, 0.000000, 0.662110, 0.00000000 },
    { 83.936281, 50.101061, 0.257869, 0.000000, 0.517481, 0.00000000 },
    { 149.638610, -119.412131, 0.804322, 0.000000, 0.862194, 0.00000000 },
    { 37.023677, 94.203337, 0.760910, 0.000000, 0.590252, 0.00000000 },
    { 29.696394, -382.264341, 1.000000, 0.000000, 1.000000, 240.85625653 },
    { 9.896674, -127.619691, 1.000000, 0.000000, 1.000000, 128.00285058 },
    { 50.577618, -189.163531, 1.000000, 0.000000, 1.000000, 195.80841933 },
    { -69.136591, 230.645397, 0.494251, 0.000000, 0.334184, 0.00000000 },
    { 27.075572, 152.036984, 0.447202, 0.104709, 0.000000, 0.00000000 },
    { 143.146771, 5.937457, 0.813639, 0.121849, 0.000000, 0.00000000 },
    { 53.838031, 154.750979, 1.000000, 0.482778, 0.000000, 59.44317793 },
    { 26.474242, 21.778856, 1.000000, 0.496837, 0.000000, 33.81679412 },
    { -1.105915, -73.195584, 0.891586, 0.285540, 0.000000, 0.00000000 },
    { 363.859429, 34.596431, 1.000000, 0.000000, 0.000000, 295.29175709 },
    { 208.358403, -104.617570, 1.000000, 0.000000, 0.000000, 233.14815084 },
    { -153.085250, 368.796703, 1.000000, 0.989825, 0.000000, 51.82263639 },
    { 233.788205, 321.841606, 1.000000, 1.000000, 0.000000, 396.15426549 },
    { 99.315710, 99.270779, 1.000000, 1.000000, 0.000000, 140.42185656 },
    { -126.984595, -25.099862, 0.646310, 0.927543, 0.000000, 0.00000000 },
    { 133.332059, -360.245271, 0.572066, 0.000000, 0.112396, 0.00000000 },
    { -193.618193, -49.031752, 0.158792, 0.000000, 0.253938, 0.00000000 },
    { 100.665730, -302.531137, 0.783488, 0.000000, 1.000000, 44.08769866 },
    { 71.782952, 67.295278, 0.865813, 0.000000, 0.805735, 0.00000000 },
    { -105.500376, -107.891203, 0.699194, 0.000000, 1.000000, 40.59592483 },
    { 137.570081, 57.955395, 0.959468, 0.000000, 0.832697, 0.00000000 },
    { 15.883829, 7.982381, 0.987656, 0.000000, 0.809654, 0.00000000 },
    { -80.577273, 290.862183, 0.396382, 0.029993, 0.000000, 0.00000000 },
    { 225.411401, -68.188505, 1.000000, 0.000000, 0.152681, 9.81701619 },
    { 79.002454, -5.997779, 1.000000, 0.000000, 0.066913, 71.41702142 },
    { 147.921962, 40.935552, 1.000000, 0.000000, 0.000000, 135.70592937 },
    { 58.970175, -299.496637, 1.000000, 0.000000, 0.574717, 200.81798791 },
    { 141.343893, -161.870869, 1.000000, 0.000000, 0.748497, 203.34283644 },
    { -321.808705, -54.450727, 0.274071, 0.000000, 0.905683, 0.00000000 },
    { 198.382861, 208.932185, 0.468461, 0.000000, 0.302548, 0.00000000 },
    { 5.603261, 2.501682, 0.478858, 0.000000, 0.295326, 0.00000000 },
    { -35.332528, -10.555550, 0.405762, 0.000000, 0.325797, 0.00000000 },
    { 63.030052, 117.617464, 0.407306, 0.013735, 0.000000, 0.00000000 },
    { 167.183678, 150.632751, 1.000000, 0.427232, 0.000000, 14.78652948 },
    { -96.894512, 60.698676, 0.845375, 0.602454, 0.000000, 0.00000000 },
    { -137.070199, 102.046245, 0.649990, 0.897036, 0.000000, 0.00000000 },
    { 131.732796, -114.929068, 0.813436, 0.565264, 0.000000, 0.00000000 },
    { -16.408072, -14.847543, 0.750986, 0.522403, 0.000000, 0.00000000 },
    { 272.884012, -131.472425, 1.000000, 0.021159, 0.000000, 84.32718664 },
    { 99.509822, -15.196823, 1.000000, 0.000000, 0.000000, 95.60223779 },
    { 54.870101, -11.129770, 1.000000, 0.000000, 0.000000, 55.98749686 },
    { -6.575626, -26.877974, 1.000000, 0.000000, 0.066412, 7.74432760 },
    { -18.809967, -14.597915, 0.974045, 0.000000, 0.108553, 0.00000000 },
    { -67.337075, 78.454366, 0.810389, 0.117926, 0.000000, 0.00000000 },
    { 289.092337, 47.888549, 1.000000, 0.000000, 0.000000, 209.39592467 },
    { -329.340991, 103.682360, 0.326300, 0.299305, 0.000000, 0.00000000 },
    { -333.601693, -63.472751, 0.000000, 0.715394, 0.599319, 0.00000000 },
    { -54.020790, 115.864759, 0.000000, 1.000000, 0.558293, 6.12544320 },
  };

#ifdef _WIN32
  char debugStr[200] = { 0 };
#endif

#ifdef __AVR_ATmega2560__
  u32 beginTime = millis();
#endif

  Vecf64<2> test_vec;
  if (&test_vec.x != &test_vec.m_data[0] || &test_vec.y != &test_vec.m_data[1]) {
#ifdef __AVR_ATmega2560__
    Serial.println("Error in alignment .x = " + String((u32)&test_vec.x) + " .m_data[0] = " + String((u32)&test_vec.m_data[0]) + " .y = " + String((u32)&test_vec.y) + " .m_data[1] = " + String((u32)&test_vec.m_data[1]));
#else
    s32 y = 0;
#endif
  }

  JacobianControl *jc = (JacobianControl *)new JacobianBoxConstraintControl();

  f64 initQ[N_TURN_ACT] = { 1,1,1 };
  jc->SetQs(&initQ[0]);

  const f64 *qs;

  f64 Jdata[2][N_TURN_ACT] = {
    {400, -200, -200},
    {0, 346.4102, -346.4102}
  };

  J = Matrixf64<2, N_TURN_ACT>(Jdata);
  f64 maxMaxError = -1e10;
  for (s32 i = 0; i < sizeof(testData) / sizeof(testData[0]); i++) {
    Vecf64<2> dx(testData[i].q_res[0], testData[i].q_res[1]);

    qs = jc->Update(dx, J);

    f64 maxError = -1;
    for (s32 j = 0; j < N_TURN_ACT; j++)
      maxError = MAX(maxError, ABS(qs[j] - testData[i].q_res[2 + j]));

    if (maxError > 1e-4)
      s32 y = 0;

#ifdef _WIN32
    sprintf(debugStr, "i=%d maxError=%f\n", i, maxError);
    OutputDebugString(debugStr);
#endif

    if (maxError > maxMaxError)
      maxMaxError = maxError;

#ifdef __AVR_ATmega2560__
    Serial.println("Error " + String(i) + " " + String(maxError,10));// +" qs " + String(qs[0]) + " " + String(qs[1]) + " " + String(qs[2]));
#endif

    jc->SetQs(&testData[i].q_res[2]);

  }
#ifdef __AVR_ATmega2560__
  u32 endTime = millis();
  f64 nTrials = (f64)(sizeof(testData) / sizeof(testData[0]));
  Serial.println("Average time " + String(((f64)endTime - beginTime) / nTrials));
#endif
#ifdef _WIN32
  sprintf(debugStr, "Maximum Error = %f\n", maxMaxError);
  OutputDebugString(debugStr);
#endif
}
#endif


extern "C"
{
#include "cvxgen/solver.h"
  Vars vars;
  Params params;
  Workspace work;
  Settings settings;
}

#ifdef RUN_CVX_TEST
void runTest()
{
#if 0
  DeltaTestData testData[] = {
    { -356.352529, -24.280793, 0.018780, 0.874615, 0.944707, 0.00000059 },
    { 39.941583, -30.465344, 0.034911, 0.746919, 0.904958, 0.00000060 },
    { 5.464396, 19.848427, 0.042387, 0.769383, 0.870124, 0.00000069 },
    { -11.133521, 4.342671, 0.033833, 0.794930, 0.883135, 0.00000061 },
    { -250.165437, 69.565317, 0.000000, 1.000000, 1.000000, 176.60780253 },
    { -48.159266, 266.180382, 0.000000, 1.000000, 0.483904, 174.79734228 },
    { -8.071445, -5.183887, 0.000000, 1.000000, 0.505218, 4.39812936 },
    { -96.691088, -37.479680, 0.000000, 1.000000, 0.707229, 64.99709876 },
    { -97.653469, 57.668323, 0.000000, 1.000000, 0.704440, 113.40454652 },
    { -61.614649, -165.056207, 0.000000, 0.867438, 1.000000, 33.50296444 },
    { 120.332318, 181.612064, 0.082466, 0.911208, 0.519501, 0.00000102 },
    { 23.200744, -120.329147, 0.137323, 0.734382, 0.690036, 0.00000113 },
    { 27.201998, 152.785872, 0.145835, 0.895417, 0.410015, 0.00000093 },
    { 359.624095, -151.925116, 0.755530, 0.386767, 0.339936, 0.00000068 },
    { -169.218421, -319.033908, 0.472408, 0.066205, 0.940345, 0.00000125 },
    { 85.574700, -124.650271, 0.683071, 0.000000, 1.000000, 81.05116577 },
    { 218.705058, 143.106348, 1.000000, 0.000000, 0.575249, 8.06338678 },
    { -135.179675, -51.411166, 0.798467, 0.062210, 0.785871, 0.00000084 },
    { 25.382487, 160.614695, 0.790100, 0.222215, 0.482221, 0.00000054 },
    { -105.649956, 20.883827, 0.616848, 0.343230, 0.542950, 0.00000101 },
    { -47.523285, 176.798845, 0.537787, 0.638165, 0.327510, 0.00000078 },
    { 150.081967, -180.183789, 0.782922, 0.248023, 0.457513, 0.00000114 },
    { -23.223499, 108.738715, 0.743779, 0.423889, 0.319478, 0.00000069 },
    { -78.847048, 23.110356, 0.617251, 0.527836, 0.356711, 0.00000091 },
    { 61.841870, 196.093626, 0.765294, 0.804310, 0.067112, 0.00000087 },
    { 165.101401, 100.788502, 1.000000, 0.899944, 0.000000, 88.82329821 },
    { -183.403986, 215.625218, 0.591518, 1.000000, 0.000000, 180.96483257 },
    { -5.651111, -276.379401, 0.552236, 0.575927, 0.373765, 0.00000926 },
    { -55.727336, -138.660710, 0.458204, 0.421074, 0.619191, 0.00000857 },
    { -66.880874, -118.349005, 0.332565, 0.291815, 0.831576, 0.00000112 },
    { -116.927462, -57.550130, 0.091111, 0.259613, 0.965508, 0.00000059 },
    { -23.164143, 8.315765, 0.054603, 0.293018, 0.974907, 0.00000045 },
    { 17.879601, 388.229545, 0.134300, 0.888377, 0.449544, 0.00000094 },
    { 33.658547, 274.535400, 0.049485, 1.000000, 0.000000, 80.14146566 },
    { -169.505615, -234.780551, 0.000000, 1.000000, 0.695454, 12.26373857 },
    { -235.747892, 37.204263, 0.000000, 1.000000, 0.909584, 222.76579471 },
    { 26.493019, 11.855891, 0.015848, 0.966728, 0.842087, 0.00000048 },
    { 19.142351, 57.649392, 0.005994, 0.992228, 0.701167, 0.00000081 },
    { 41.820435, 30.426235, 0.031840, 0.957439, 0.578545, 0.00000045 },
    { -70.955780, -24.681625, 0.000000, 1.000000, 0.726038, 23.33550392 },
    { 260.390234, -80.821191, 0.359486, 0.591855, 0.551204, 0.00000795 },
    { -273.528967, -72.101378, 0.009917, 0.822039, 0.989526, 0.00000295 },
    { -32.302640, 369.280135, 0.000000, 1.000000, 0.314407, 147.53215734 },
    { 154.426868, -246.086864, 0.321162, 0.579899, 0.604697, 0.00000832 },
    { -334.248451, 41.713511, 0.000000, 1.000000, 0.981666, 53.54337568 },
    { -8.707361, -263.986799, 0.000000, 0.448503, 1.000000, 133.18306036 },
    { 217.333779, -130.426823, 0.330006, 0.046919, 0.974926, 0.00000043 },
    { -147.218828, 165.010776, 0.123688, 0.446821, 0.898483, 0.00000091 },
    { 25.396850, 72.509880, 0.181715, 0.546015, 0.788359, 0.00000111 },
    { -47.811286, -310.313038, 0.000000, 0.000000, 1.000000, 63.67056218 },
    { 335.171199, -59.368711, 0.837928, 0.000000, 1.000000, 59.36871127 },
    { -34.577396, -9.715333, 0.751485, 0.000000, 1.000000, 9.71533326 },
    { -370.267830, 25.928223, 0.000000, 0.143228, 1.000000, 47.37517264 },
    { 45.437311, -188.642721, 0.041977, 0.000000, 1.000000, 139.02722858 },
    { -83.774713, 24.179426, 0.000000, 0.136080, 1.000000, 45.92016844 },
    { 13.003580, 26.423059, 0.052358, 0.194067, 0.981710, 0.00000044 },
    { 199.737823, -160.240376, 0.463815, 0.000000, 1.000000, 86.67797492 },
    { 102.894435, 129.818766, 0.667633, 0.133960, 0.759205, 0.00000111 },
    { 79.794003, 25.433620, 0.804895, 0.108446, 0.660271, 0.00000102 },
    { -31.492937, -258.538068, 0.841804, 0.000000, 1.000000, 103.28568031 },
    { -108.954832, 14.475386, 0.567141, 0.018617, 0.976831, 0.00000033 },
    { -220.529589, -312.624386, 0.018044, 0.000000, 1.000000, 298.14901034 },
    { -25.782075, 11.056923, 0.000000, 0.047145, 1.000000, 10.54891878 },
    { 30.991405, 11.762217, 0.074489, 0.061132, 0.980033, 0.00000063 },
    { 209.409414, -54.178063, 0.577430, 0.000000, 1.000000, 26.08450838 },
    { 35.523224, -57.999358, 0.666241, 0.000000, 1.000000, 57.99935827 },
    { -17.978752, 276.206489, 0.581777, 0.359153, 0.561813, 0.00000839 },
    { 107.977300, -83.137751, 0.772962, 0.160395, 0.603054, 0.00000867 },
    { 317.501132, 136.621667, 1.000000, 0.000000, 0.000000, 75.86147414 },
    { -75.292681, 286.711551, 1.000000, 0.714866, 0.000000, 78.15040082 },
    { 151.840402, 232.852659, 1.000000, 0.999999, 0.000000, 248.19912033 },
    { 158.035323, -244.182023, 1.000000, 0.273785, 0.000000, 14.77154794 },
    { -184.024957, 225.005099, 0.883740, 0.942354, 0.019035, 0.00000060 },
    { 80.337720, 96.452271, 1.000000, 1.000000, 0.000000, 81.31038177 },
    { -307.038493, 169.845569, 0.232411, 1.000000, 0.000000, 169.84556627 },
    { 200.179969, 289.598211, 0.732915, 1.000000, 0.000000, 289.59832476 },
    { 117.691535, -370.401548, 0.836396, 0.274623, 0.343880, 0.00000112 },
    { -55.248096, 60.561517, 0.754356, 0.418117, 0.312548, 0.00000070 },
    { 19.608350, 330.564069, 0.938044, 1.000000, 0.000000, 20.72392453 },
    { 272.879285, -60.585161, 1.000000, 0.558708, 0.000000, 184.56576888 },
    { -114.126269, 12.601805, 0.821622, 0.683835, 0.088749, 0.00000095 },
    { 175.108530, -301.742502, 1.000000, 0.000000, 0.270426, 3.84041919 },
    { 72.306447, 47.257228, 1.000000, 0.000000, 0.077728, 38.99060546 },
    { 166.749585, -295.522751, 1.000000, 0.000000, 0.509112, 292.17079339 },
    { -44.144856, 102.626055, 0.900921, 0.159412, 0.372268, 0.00000096 },
    { -195.710234, 90.873036, 0.596979, 0.475909, 0.426437, 0.00001191 },
    { 276.205620, 189.150638, 1.000000, 0.528467, 0.000000, 46.44372051 },
    { -302.633860, -67.117545, 0.485602, 0.673778, 0.339062, 0.00000105 },
  };
#else

  DeltaTestData testData[] = {
    { -307.038493, 169.845569, 0.232411, 1.000000, 0.000000, 169.84556627 }
  };
#endif

  set_defaults();
  setup_indexing();

  settings.verbose = 0;
  settings.verbose_refinement = 0;
  settings.max_iters = 8;
  settings.better_start = 0;
  settings.debug = 0;
  settings.refine_steps = 0;

  J[0] = Vecf64<2>(400, 0); J[1] = Vecf64<2>(-200.0000, 346.4102); J[2] = Vecf64<2>(-200.0000, -346.4102);

  f64 qs[N_TURN_ACT];
  qs[0] = qs[1] = qs[2] = 1;

#ifdef __AVR_ATmega2560__
  u32 beginTime = millis();
#endif
  s32 nRepeat = 100;
  Vecf64<2> dx(testData[0].q_res[0], testData[0].q_res[1]);
  params.q[0] = qs[0];
  params.q[1] = qs[1];
  params.q[2] = qs[2];

  for (s32 j = 0; j < N_TURN_ACT; j++) {
    params.J[j * 2 + 0] = J[j].x;
    params.J[j * 2 + 1] = J[j].y;
  }

  params.dx[0] = dx.x;
  params.dx[1] = dx.y;
  for (s32 i = 0; i < nRepeat*sizeof(testData) / sizeof(testData[0]); i++) {
    //Vec2f64 dx(testData[i].q_res[0], testData[i].q_res[1]);

    solve();

#if 0
    Vec2f64 delta_x_actual = J[0] * vars.dq[0] + J[1] * vars.dq[1] + J[2] * vars.dq[2];
    f64 error = (delta_x_actual - dx).magnitude();
    f64 matlabError = testData[i].q_res[5];
    if (error > 1e-5 && ABS(error - matlabError) / matlabError > 1e-4)
      s32 y = 0;

#ifdef __AVR_ATmega2560__
    Serial.println("Error " + String(error) + " matlab error " + String(matlabError) + " difference " + String(ABS(error - matlabError)) + " dq 0 1 2 " + String(vars.dq[0]) + " " + String(vars.dq[1]) + " " + String(vars.dq[2]));
#endif

    qs[0] = testData[i].q_res[2];
    qs[1] = testData[i].q_res[3];
    qs[2] = testData[i].q_res[4];
#endif
  }


#ifdef __AVR_ATmega2560__
  u32 endTime = millis();
  f64 nTrials = (f64)(nRepeat*sizeof(testData) / sizeof(testData[0]));
  Serial.println("Average time " + String(((f64)endTime - beginTime) / nTrials));
#endif
}
#endif

#ifndef __AVR_ATmega2560__
int main(int argc, char **argv)
{
  runTest();
}
#endif