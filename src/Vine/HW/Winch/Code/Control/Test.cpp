#include <stdio.h>
#include "Common.h"
#include "JacobianControl.h"
#include <stddef.h>
#ifdef _WIN32
#include <Windows.h>
#endif
#ifdef __AVR_ATmega2560__
#include "Arduino.h"
#endif

#define RUN_JACOBIAN_TEST
//#define RUN_CVX_TEST

struct DeltaTestData
{
  //Vec2f64 delta_x_desired;
  f64 q_res[6];
};

Matrixf64 <2, N_TURN_ACT> J;

#ifdef RUN_JACOBIAN_TEST
void runTest()
{
  DeltaTestData testData[] = {
    { 170.371234, -95.608164, 0.563927, 0.000000, 0.275997, 0.00000000 },
  { -233.903010, -197.857921, 0.264752, 0.000000, 0.847164, 0.00000000 },
  { -117.926139, -13.708088, 0.000000, 0.010277, 0.897013, 0.00000000 },
  { 12.317851, 29.855233, 0.000000, 0.022575, 0.823126, 0.00000000 },
  { -12.809957, -176.058280, 0.045125, 0.000000, 1.000000, 106.96705775 },
  { 191.742743, 295.162649, 0.098451, 0.000000, 0.147939, 0.00000000 },
  { -24.980469, 163.800123, 0.124486, 0.324911, 0.000000, 0.00000000 },
  { -71.807737, 241.046731, 0.282511, 1.000000, 0.000000, 7.18917962 },
  { -210.406488, -115.392879, 0.000000, 1.000000, 0.371585, 26.65614289 },
  { -11.299851, 113.312318, 0.000000, 1.000000, 0.140382, 66.44211724 },
  { -2.953769, 130.992281, 0.000000, 1.000000, 0.000000, 88.01400691 },
  { 40.876406, 52.130017, 0.102191, 1.000000, 0.000000, 52.13001656 },
  { 374.269059, -86.303687, 0.913295, 0.750863, 0.000000, 0.00000000 },
  { 3.669004, 9.003768, 0.935463, 0.776854, 0.000000, 0.00000000 },
  { 78.850461, 268.603013, 1.000000, 1.000000, 0.000000, 214.79132260 },
  { 1.691403, -9.015954, 0.991215, 0.973973, 0.000000, 0.00000000 },
  { -0.580203, -0.307962, 0.989320, 0.973084, 0.000000, 0.00000000 },
  { -254.709656, -24.840489, 0.316692, 0.901376, 0.000000, 0.00000000 },
  { 103.216555, -9.348425, 0.561240, 0.874389, 0.000000, 0.00000000 },
  { 112.779407, -329.422729, 0.444280, 0.000000, 0.076572, 0.00000000 },
  { 0.783387, -0.413210, 0.446835, 0.000000, 0.077765, 0.00000000 },
  { -385.395218, 74.802858, 0.000000, 0.624622, 0.486450, 0.00000000 },
  { -262.055133, 193.061634, 0.000000, 1.000000, 0.583717, 193.44243357 },
  { -295.298888, -88.730664, 0.000000, 1.000000, 1.000000, 219.17868385 },
  { -11.592471, 1.100877, 0.000000, 1.000000, 1.000000, 11.64462547 },
  { 38.153885, 23.060647, 0.000000, 0.937900, 0.871330, 0.00000000 },
  { -3.019485, 385.954306, 0.000000, 1.000000, 0.070539, 174.08019360 },
  { -220.960868, -240.594507, 0.000000, 1.000000, 0.867642, 71.06047131 },
  { -232.548879, -102.515464, 0.000000, 1.000000, 1.000000, 213.72603253 },
  { 140.563548, -342.987457, 0.000000, 0.081706, 1.000000, 49.76212499 },
  { 281.443911, -172.160857, 0.662757, 0.000000, 1.000000, 143.85709071 },
  { 119.851593, 80.576357, 0.846084, 0.000000, 0.767396, 0.00000000 },
  { 213.126541, 48.355650, 1.000000, 0.000000, 0.473253, 107.07705131 },
  { 5.848255, -19.603360, 1.000000, 0.000000, 0.508385, 14.86641747 },
  { 54.952447, 135.469806, 0.941847, 0.000000, 0.117317, 0.00000000 },
  { 11.405959, 317.830393, 1.000000, 0.644283, 0.000000, 108.00838432 },
  { -152.917420, 204.750124, 0.795565, 1.000000, 0.000000, 81.52618912 },
  { -233.200154, 9.654037, 0.212564, 1.000000, 0.000000, 9.65403728 },
  { 350.297516, -140.479580, 0.885543, 0.594470, 0.000000, 0.00000000 },
  { 257.686319, 217.833327, 1.000000, 0.801214, 0.000000, 292.43065848 },
  { -22.884347, 33.209771, 0.990723, 0.897082, 0.000000, 0.00000000 },
  { -151.771993, 136.525402, 0.662752, 1.000000, 0.000000, 100.87359049 },
  { 144.189027, -35.958089, 0.971324, 0.896198, 0.000000, 0.00000000 },
  { 342.844702, 26.699431, 1.000000, 0.539786, 0.000000, 300.32821719 },
  { 146.571866, 122.987831, 1.000000, 0.622848, 0.000000, 188.42887512 },
  { 121.001255, -166.587887, 1.000000, 0.110923, 0.000000, 21.49621715 },
  { -302.341457, 105.411780, 0.396295, 0.415220, 0.000000, 0.00000000 },
  { 227.170071, 29.265981, 1.000000, 0.496473, 0.000000, 2.23855029 },
  { -334.534401, 208.244703, 0.415428, 1.000000, 0.000000, 33.81782108 },
  { 6.850596, -20.468871, 0.403010, 0.940911, 0.000000, 0.00000000 },
  { 66.113190, 168.458588, 0.597837, 1.000000, 0.000000, 147.98971726 },
  { -38.701451, -127.055710, 0.317694, 0.633222, 0.000000, 0.00000000 },
  { -234.916989, 284.026916, 0.000000, 1.000000, 0.000000, 160.71428470 },
  { 156.201934, -46.842079, 0.322894, 0.864779, 0.000000, 0.00000000 },
  { 106.170807, -78.603521, 0.474867, 0.637870, 0.000000, 0.00000000 },
  { 182.852712, 104.660922, 1.000000, 0.898468, 0.000000, 28.77405247 },
  { -189.791211, -302.599815, 0.088757, 0.024938, 0.000000, 0.00000000 },
  { 300.622438, -66.884691, 0.911915, 0.000000, 0.168142, 0.00000000 },
  { 16.228968, -283.555576, 1.000000, 0.000000, 0.805814, 125.31894022 },
  { -91.994815, -292.821696, 0.867106, 0.000000, 1.000000, 225.55368901 },
  { 147.548574, -23.988013, 1.000000, 0.000000, 0.933947, 93.73897653 },
  { 83.097741, 47.782548, 1.000000, 0.000000, 0.726622, 48.07348110 },
  { 25.920576, 143.111473, 0.858238, 0.000000, 0.313495, 0.00000000 },
  { 8.893261, -22.332887, 0.912706, 0.000000, 0.377965, 0.00000000 },
  { -309.186096, 101.011719, 0.000000, 0.006057, 0.092426, 0.00000000 },
  { -2.265775, 25.258974, 0.000000, 0.048180, 0.061633, 0.00000000 },
  { 1.686731, 33.986355, 0.000000, 0.093018, 0.008361, 0.00000000 },
  { 24.182658, -63.661709, 0.059326, 0.000000, 0.099118, 0.00000000 },
  { 109.715919, 306.830693, 0.677370, 0.786626, 0.000000, 0.00000000 },
  { 87.178300, -219.038341, 0.579161, 0.154317, 0.000000, 0.00000000 },
  { 20.576038, -12.215039, 0.612970, 0.119055, 0.000000, 0.00000000 },
  { 222.888662, -49.826459, 1.000000, 0.000000, 0.000000, 45.09052541 },
  { -107.019760, 312.463100, 1.000000, 0.810277, 0.000000, 63.54971903 },
  { -212.655998, -332.395911, 0.137855, 0.000000, 0.149267, 0.00000000 },
  { 181.356147, 145.274091, 0.651663, 0.270103, 0.000000, 0.00000000 },
  { -257.115158, 44.327691, 0.072857, 0.398066, 0.000000, 0.00000000 },
  { 0.636657, 12.435739, 0.092398, 0.433965, 0.000000, 0.00000000 },
  { -140.286231, -40.024188, 0.000000, 0.634513, 0.316088, 0.00000000 },
  { 143.274484, -115.031136, 0.000000, 0.110293, 0.123934, 0.00000000 },
  { -220.808446, 123.833509, 0.000000, 0.841053, 0.497217, 0.00000000 },
  { -378.891847, -65.339615, 0.000000, 1.000000, 1.000000, 252.34081298 },
  { 48.211428, -192.739946, 0.000000, 0.522441, 1.000000, 54.61765123 },
  { 58.402770, 234.428265, 0.000000, 0.714803, 0.515625, 0.00000000 },
  { -2.705487, -302.333427, 0.000000, 0.285186, 0.958769, 0.00000000 },
  { 87.326323, -3.566250, 0.000000, 0.061722, 0.745601, 0.00000000 },
  { -151.368116, 76.363940, 0.000000, 0.543465, 1.000000, 4.78029326 },
  { -61.093723, 132.749657, 0.000000, 0.887807, 0.961127, 0.00000000 },
  { -214.756823, 29.957114, 0.000000, 1.000000, 1.000000, 184.59978595 },
  { -5.135300, 53.499594, 0.000000, 1.000000, 0.890589, 31.19709686 },
  { -17.483958, 51.716552, 0.000000, 1.000000, 0.800474, 40.99982799 },
  { -112.108746, 247.462901, 0.000000, 1.000000, 0.404837, 220.82047244 },
  { -320.721759, -237.172794, 0.000000, 1.000000, 1.000000, 204.05809607 },
  { -203.609400, -81.971230, 0.000000, 1.000000, 1.000000, 219.49047884 },
  { -181.982294, -226.711471, 0.000000, 0.736633, 1.000000, 270.95702478 },
  { -175.778122, -156.573383, 0.000000, 0.617364, 1.000000, 230.51501014 },
  { -112.131847, -86.983244, 0.000000, 0.569205, 1.000000, 140.60064956 },
  { 41.402907, -238.270909, 0.000000, 0.001580, 1.000000, 83.27948522 },
  { -35.727173, 91.526516, 0.000000, 0.223005, 0.957211, 0.00000000 },
  { 125.378848, 60.221561, 0.003520, 0.000000, 0.560361, 0.00000000 },
  { 66.040956, 5.342888, 0.160911, 0.000000, 0.544938, 0.00000000 },
  };

#ifdef _WIN32
  char debugStr[200] = { 0 };
#endif

#ifdef __AVR_ATmega2560__
  u32 beginTime = millis();
#endif

  Vecf64<2> test_vec;
  if (&test_vec.x != &test_vec.m_data[0] || &test_vec.y != &test_vec.m_data[1]) {
#ifdef __AVR_ATmega2560__
    Serial.println("Error in alignment .x = " + String((u32)&test_vec.x) + " .m_data[0] = " + String((u32)&test_vec.m_data[0]) + " .y = " + String((u32)&test_vec.y) + " .m_data[1] = " + String((u32)&test_vec.m_data[1]));
#else
    s32 y = 0;
#endif
  }

  JacobianControl *jc = (JacobianControl *)new JacobianBoxConstraintControl();

  f64 initQ[N_TURN_ACT] = { 1,1,1 };
  jc->SetQs(&initQ[0]);

  const f64 *qs;

  f64 Jdata[2][N_TURN_ACT] = {
    {400, -200, -200},
    {0, 346.4102, -346.4102}
  };

  J = Matrixf64<2, N_TURN_ACT>(Jdata);
  f64 maxMaxError = -1e10;
  for (s32 i = 0; i < sizeof(testData) / sizeof(testData[0]); i++) {
    Vecf64<2> dx(testData[i].q_res[0], testData[i].q_res[1]);

    qs = jc->Update(dx, J);

    f64 maxError = -1;
    for (s32 j = 0; j < N_TURN_ACT; j++)
      maxError = MAX(maxError, ABS(qs[j] - testData[i].q_res[2 + j]));

    if (maxError > 1e-4)
      s32 y = 0;

#ifdef _WIN32
    sprintf(debugStr, "i=%d maxError=%f\n", i, maxError);
    OutputDebugString(debugStr);
#endif

    if (maxError > maxMaxError)
      maxMaxError = maxError;

#ifdef __AVR_ATmega2560__
    Serial.println("Error " + String(i) + " " + String(maxError));// +" qs " + String(qs[0]) + " " + String(qs[1]) + " " + String(qs[2]));
#endif

    jc->SetQs(&testData[i].q_res[2]);

  }
#ifdef __AVR_ATmega2560__
  u32 endTime = millis();
  f64 nTrials = (f64)(sizeof(testData) / sizeof(testData[0]));
  Serial.println("Average time " + String(((f64)endTime - beginTime) / nTrials));
#endif
#ifdef _WIN32
  sprintf(debugStr, "Maximum Error = %f\n", maxMaxError);
  OutputDebugString(debugStr);
#endif
}
#endif


extern "C"
{
#include "cvxgen/solver.h"
  Vars vars;
  Params params;
  Workspace work;
  Settings settings;
}

#ifdef RUN_CVX_TEST
void runTest()
{
#if 0
  DeltaTestData testData[] = {
    { -356.352529, -24.280793, 0.018780, 0.874615, 0.944707, 0.00000059 },
    { 39.941583, -30.465344, 0.034911, 0.746919, 0.904958, 0.00000060 },
    { 5.464396, 19.848427, 0.042387, 0.769383, 0.870124, 0.00000069 },
    { -11.133521, 4.342671, 0.033833, 0.794930, 0.883135, 0.00000061 },
    { -250.165437, 69.565317, 0.000000, 1.000000, 1.000000, 176.60780253 },
    { -48.159266, 266.180382, 0.000000, 1.000000, 0.483904, 174.79734228 },
    { -8.071445, -5.183887, 0.000000, 1.000000, 0.505218, 4.39812936 },
    { -96.691088, -37.479680, 0.000000, 1.000000, 0.707229, 64.99709876 },
    { -97.653469, 57.668323, 0.000000, 1.000000, 0.704440, 113.40454652 },
    { -61.614649, -165.056207, 0.000000, 0.867438, 1.000000, 33.50296444 },
    { 120.332318, 181.612064, 0.082466, 0.911208, 0.519501, 0.00000102 },
    { 23.200744, -120.329147, 0.137323, 0.734382, 0.690036, 0.00000113 },
    { 27.201998, 152.785872, 0.145835, 0.895417, 0.410015, 0.00000093 },
    { 359.624095, -151.925116, 0.755530, 0.386767, 0.339936, 0.00000068 },
    { -169.218421, -319.033908, 0.472408, 0.066205, 0.940345, 0.00000125 },
    { 85.574700, -124.650271, 0.683071, 0.000000, 1.000000, 81.05116577 },
    { 218.705058, 143.106348, 1.000000, 0.000000, 0.575249, 8.06338678 },
    { -135.179675, -51.411166, 0.798467, 0.062210, 0.785871, 0.00000084 },
    { 25.382487, 160.614695, 0.790100, 0.222215, 0.482221, 0.00000054 },
    { -105.649956, 20.883827, 0.616848, 0.343230, 0.542950, 0.00000101 },
    { -47.523285, 176.798845, 0.537787, 0.638165, 0.327510, 0.00000078 },
    { 150.081967, -180.183789, 0.782922, 0.248023, 0.457513, 0.00000114 },
    { -23.223499, 108.738715, 0.743779, 0.423889, 0.319478, 0.00000069 },
    { -78.847048, 23.110356, 0.617251, 0.527836, 0.356711, 0.00000091 },
    { 61.841870, 196.093626, 0.765294, 0.804310, 0.067112, 0.00000087 },
    { 165.101401, 100.788502, 1.000000, 0.899944, 0.000000, 88.82329821 },
    { -183.403986, 215.625218, 0.591518, 1.000000, 0.000000, 180.96483257 },
    { -5.651111, -276.379401, 0.552236, 0.575927, 0.373765, 0.00000926 },
    { -55.727336, -138.660710, 0.458204, 0.421074, 0.619191, 0.00000857 },
    { -66.880874, -118.349005, 0.332565, 0.291815, 0.831576, 0.00000112 },
    { -116.927462, -57.550130, 0.091111, 0.259613, 0.965508, 0.00000059 },
    { -23.164143, 8.315765, 0.054603, 0.293018, 0.974907, 0.00000045 },
    { 17.879601, 388.229545, 0.134300, 0.888377, 0.449544, 0.00000094 },
    { 33.658547, 274.535400, 0.049485, 1.000000, 0.000000, 80.14146566 },
    { -169.505615, -234.780551, 0.000000, 1.000000, 0.695454, 12.26373857 },
    { -235.747892, 37.204263, 0.000000, 1.000000, 0.909584, 222.76579471 },
    { 26.493019, 11.855891, 0.015848, 0.966728, 0.842087, 0.00000048 },
    { 19.142351, 57.649392, 0.005994, 0.992228, 0.701167, 0.00000081 },
    { 41.820435, 30.426235, 0.031840, 0.957439, 0.578545, 0.00000045 },
    { -70.955780, -24.681625, 0.000000, 1.000000, 0.726038, 23.33550392 },
    { 260.390234, -80.821191, 0.359486, 0.591855, 0.551204, 0.00000795 },
    { -273.528967, -72.101378, 0.009917, 0.822039, 0.989526, 0.00000295 },
    { -32.302640, 369.280135, 0.000000, 1.000000, 0.314407, 147.53215734 },
    { 154.426868, -246.086864, 0.321162, 0.579899, 0.604697, 0.00000832 },
    { -334.248451, 41.713511, 0.000000, 1.000000, 0.981666, 53.54337568 },
    { -8.707361, -263.986799, 0.000000, 0.448503, 1.000000, 133.18306036 },
    { 217.333779, -130.426823, 0.330006, 0.046919, 0.974926, 0.00000043 },
    { -147.218828, 165.010776, 0.123688, 0.446821, 0.898483, 0.00000091 },
    { 25.396850, 72.509880, 0.181715, 0.546015, 0.788359, 0.00000111 },
    { -47.811286, -310.313038, 0.000000, 0.000000, 1.000000, 63.67056218 },
    { 335.171199, -59.368711, 0.837928, 0.000000, 1.000000, 59.36871127 },
    { -34.577396, -9.715333, 0.751485, 0.000000, 1.000000, 9.71533326 },
    { -370.267830, 25.928223, 0.000000, 0.143228, 1.000000, 47.37517264 },
    { 45.437311, -188.642721, 0.041977, 0.000000, 1.000000, 139.02722858 },
    { -83.774713, 24.179426, 0.000000, 0.136080, 1.000000, 45.92016844 },
    { 13.003580, 26.423059, 0.052358, 0.194067, 0.981710, 0.00000044 },
    { 199.737823, -160.240376, 0.463815, 0.000000, 1.000000, 86.67797492 },
    { 102.894435, 129.818766, 0.667633, 0.133960, 0.759205, 0.00000111 },
    { 79.794003, 25.433620, 0.804895, 0.108446, 0.660271, 0.00000102 },
    { -31.492937, -258.538068, 0.841804, 0.000000, 1.000000, 103.28568031 },
    { -108.954832, 14.475386, 0.567141, 0.018617, 0.976831, 0.00000033 },
    { -220.529589, -312.624386, 0.018044, 0.000000, 1.000000, 298.14901034 },
    { -25.782075, 11.056923, 0.000000, 0.047145, 1.000000, 10.54891878 },
    { 30.991405, 11.762217, 0.074489, 0.061132, 0.980033, 0.00000063 },
    { 209.409414, -54.178063, 0.577430, 0.000000, 1.000000, 26.08450838 },
    { 35.523224, -57.999358, 0.666241, 0.000000, 1.000000, 57.99935827 },
    { -17.978752, 276.206489, 0.581777, 0.359153, 0.561813, 0.00000839 },
    { 107.977300, -83.137751, 0.772962, 0.160395, 0.603054, 0.00000867 },
    { 317.501132, 136.621667, 1.000000, 0.000000, 0.000000, 75.86147414 },
    { -75.292681, 286.711551, 1.000000, 0.714866, 0.000000, 78.15040082 },
    { 151.840402, 232.852659, 1.000000, 0.999999, 0.000000, 248.19912033 },
    { 158.035323, -244.182023, 1.000000, 0.273785, 0.000000, 14.77154794 },
    { -184.024957, 225.005099, 0.883740, 0.942354, 0.019035, 0.00000060 },
    { 80.337720, 96.452271, 1.000000, 1.000000, 0.000000, 81.31038177 },
    { -307.038493, 169.845569, 0.232411, 1.000000, 0.000000, 169.84556627 },
    { 200.179969, 289.598211, 0.732915, 1.000000, 0.000000, 289.59832476 },
    { 117.691535, -370.401548, 0.836396, 0.274623, 0.343880, 0.00000112 },
    { -55.248096, 60.561517, 0.754356, 0.418117, 0.312548, 0.00000070 },
    { 19.608350, 330.564069, 0.938044, 1.000000, 0.000000, 20.72392453 },
    { 272.879285, -60.585161, 1.000000, 0.558708, 0.000000, 184.56576888 },
    { -114.126269, 12.601805, 0.821622, 0.683835, 0.088749, 0.00000095 },
    { 175.108530, -301.742502, 1.000000, 0.000000, 0.270426, 3.84041919 },
    { 72.306447, 47.257228, 1.000000, 0.000000, 0.077728, 38.99060546 },
    { 166.749585, -295.522751, 1.000000, 0.000000, 0.509112, 292.17079339 },
    { -44.144856, 102.626055, 0.900921, 0.159412, 0.372268, 0.00000096 },
    { -195.710234, 90.873036, 0.596979, 0.475909, 0.426437, 0.00001191 },
    { 276.205620, 189.150638, 1.000000, 0.528467, 0.000000, 46.44372051 },
    { -302.633860, -67.117545, 0.485602, 0.673778, 0.339062, 0.00000105 },
  };
#else

  DeltaTestData testData[] = {
    { -307.038493, 169.845569, 0.232411, 1.000000, 0.000000, 169.84556627 }
  };
#endif

  set_defaults();
  setup_indexing();

  settings.verbose = 0;
  settings.verbose_refinement = 0;
  settings.max_iters = 8;
  settings.better_start = 0;
  settings.debug = 0;
  settings.refine_steps = 0;

  J[0] = Vecf64<2>(400, 0); J[1] = Vecf64<2>(-200.0000, 346.4102); J[2] = Vecf64<2>(-200.0000, -346.4102);

  f64 qs[N_TURN_ACT];
  qs[0] = qs[1] = qs[2] = 1;

#ifdef __AVR_ATmega2560__
  u32 beginTime = millis();
#endif
  s32 nRepeat = 100;
  Vecf64<2> dx(testData[0].q_res[0], testData[0].q_res[1]);
  params.q[0] = qs[0];
  params.q[1] = qs[1];
  params.q[2] = qs[2];

  for (s32 j = 0; j < N_TURN_ACT; j++) {
    params.J[j * 2 + 0] = J[j].x;
    params.J[j * 2 + 1] = J[j].y;
  }

  params.dx[0] = dx.x;
  params.dx[1] = dx.y;
  for (s32 i = 0; i < nRepeat*sizeof(testData) / sizeof(testData[0]); i++) {
    //Vec2f64 dx(testData[i].q_res[0], testData[i].q_res[1]);

    solve();

#if 0
    Vec2f64 delta_x_actual = J[0] * vars.dq[0] + J[1] * vars.dq[1] + J[2] * vars.dq[2];
    f64 error = (delta_x_actual - dx).magnitude();
    f64 matlabError = testData[i].q_res[5];
    if (error > 1e-5 && ABS(error - matlabError) / matlabError > 1e-4)
      s32 y = 0;

#ifdef __AVR_ATmega2560__
    Serial.println("Error " + String(error) + " matlab error " + String(matlabError) + " difference " + String(ABS(error - matlabError)) + " dq 0 1 2 " + String(vars.dq[0]) + " " + String(vars.dq[1]) + " " + String(vars.dq[2]));
#endif

    qs[0] = testData[i].q_res[2];
    qs[1] = testData[i].q_res[3];
    qs[2] = testData[i].q_res[4];
#endif
  }


#ifdef __AVR_ATmega2560__
  u32 endTime = millis();
  f64 nTrials = (f64)(nRepeat*sizeof(testData) / sizeof(testData[0]));
  Serial.println("Average time " + String(((f64)endTime - beginTime) / nTrials));
#endif
}
#endif

#ifndef __AVR_ATmega2560__
int main(int argc, char **argv)
{
  runTest();
}
#endif