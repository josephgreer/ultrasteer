function [  ] = robotKalmanPlots(act,kal,grd,t,x,x_hat,z,u)
%ROBOTKALMANPLOTS Plots results of steering 
% simulationPlots(act,kal,grd,x,x_hat,z,u,K)
% Inputs:   act: boolean that controls 3D plotting of simulation
%           kal: boolean that controls 3D plotting of estimation
%           p:   simulation target point (3x1xN)
%           x:   simulated state vector over time (4x4xN)
%           x_hat: estimated state vector over time (4x4xN)
%           z: simulated measurements (4x4xN)
%           u: simulated command inputs (3x1xN)
%
% author:   Troy Adebar
% date:     10/2/2015

%% Plot actual needle pose generated by simulation
if( act )
    % Format the plot
    hfig = figure(1); clf; format3Dplot;
    title('Needle Path');
    % Highlight the entry position and target
    hold on;
%     plot3(x(1,4,1),x(3,4,1),x(2,4,1),'ko','MarkerSize',10,...
%         'MarkerFaceColor','k');
%     plot3(t(1),t(3),t(2),'k^','MarkerSize',10,'MarkerFaceColor','k');
%     hold off;
    % Plot the state vectors
%     for t = 1:size(x,3)
%         plotstate(x(:,:,t),hfig,2);
%     end
plot3(squeeze(x(1,4,:)),squeeze(x(3,4,:)),squeeze(x(2,4,:)),'b');
plot3(squeeze(x_hat(1,4,:)),squeeze(x_hat(3,4,:)),squeeze(x_hat(2,4,:)),'r');
legend('actual','estimator');
end
%% Plot needle pose as estimated by either Kalman filter or sensors
if( kal )
    % Format the plot
    hfig = figure(2); clf; format3Dplot;
    title('GPS Output');
    % Highlight the entry position and target
    hold on;
    plot3(x(1,4,1),x(3,4,1),x(2,4,1),'ko','MarkerSize',10,...
        'MarkerFaceColor','k');
    plot3(t(1),t(3),t(2),'k^','MarkerSize',10,'MarkerFaceColor','k');
    hold off;
%     Plot the state vectors
    for t = 1:size(x,3)
        plotstate(x(:,:,t),hfig,2);
    end
end
%% Plot actual, measured, and Kalman filtered position, along with commands
if( grd )
    hfig = figure(3);
    clf;
    tits = {'p1','p2','p3','r1','r2','r3',...
        '\theta','u','l','t1','t2','t3'};
    cmds = {'deg','mm','mm'};
    % Plot position of tip
    for o = 1:3
        subplot(3,3,o);
        hold on;
        % Plot the actual simulation state
        plot(squeeze(x(o,4,:)),'k-','LineWidth',2);
        % Plot the Kalman filtered state
        plot(squeeze(x_hat(o,4,:)),'r--','LineWidth',2);
        % Plot the raw measurements
        plot(squeeze(z(o,4,:)),'bo','LineWidth',1);
        % Format the plot
        legend('Actual','Estimate','Measured','Location','SouthEast');
        grid on; xlabel('t'); title(tits{o});
        ylabel('position (mm)');
        hold off;
    end
    % Plot orientation of tip
    for o = 4:6
        subplot(3,3,o);
        hold on;
        % Convert to rotation vector
        for k = 1:size(x,3)
            xr(:,1,k) = real(mat2vec(x(1:3,1:3,k)));
            x_hatr(:,1,k) = mat2vec(x_hat(1:3,1:3,k));
            zr(:,1,k) = mat2vec(z(1:3,1:3,k));
        end        
        % Plot the actual simulation state
        plot(squeeze(xr(o-3,1,:)),'k-','LineWidth',2);
        % Plot the Kalman filtered state
        plot(squeeze(x_hatr(o-3,1,:)),'r--','LineWidth',2);
        % Plot the raw measurements
        plot(squeeze(zr(o-3,1,:)),'bo','LineWidth',1);
        % Format the plot
        legend('Actual','Estimate','Measured','Location','SouthEast');
        grid on; xlabel('t'); title(tits{o});
        if( o <= 3 )
            ylabel('position (mm)');
        else
            ylabel('rotation vect.');
        end
        hold off;
    end
    % Plot input commands
    for o = 7:9
        subplot(3,3,o);
        hold on;
        % Plot the command value
        if o == 7
        plot(squeeze(u(o-6,:,:)).*180/pi,'k-','LineWidth',5);
        end
        if o == 9
        plot(cumsum(squeeze(u(o-6,:,:))),'k-','LineWidth',5);
        end
        if o == 8
        plot(squeeze(u(o-6,:,:)),'k-','LineWidth',5);
        end
        ylabel(cmds(o-6));
        % Format the plot
        grid on;
        xlabel('t');
        title(tits{o});
        hold off;
    end
    
    set(gcf,'color','w');
end

end

function format3Dplot
% Format the 3D plots of simulation and estimate results
axis equal;
grid on;
xlabel('x-axis (mm)'); ylabel('z-axis'); zlabel('y-axis');
set(gca,'ZDir','reverse');
view(-180,90);
set(gcf,'Color',[1 1 1]);
end


